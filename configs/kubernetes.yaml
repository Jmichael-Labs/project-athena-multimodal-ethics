# Kubernetes Deployment Configuration for Project Athena
# Production-ready Kubernetes manifests for scalable deployment

apiVersion: v1
kind: Namespace
metadata:
  name: athena-ethics
  labels:
    app.kubernetes.io/name: athena
    app.kubernetes.io/component: namespace

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: athena-config
  namespace: athena-ethics
data:
  production.yaml: |
    # Production configuration loaded from ConfigMap
    logging_level: "INFO"
    cache_enabled: true
    cache_ttl: 7200
    monitoring_enabled: true
    metrics_port: 8080
    api_port: 8000

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: athena-secrets
  namespace: athena-ethics
type: Opaque
data:
  meta-api-key: <base64-encoded-api-key>
  database-password: <base64-encoded-db-password>
  redis-password: <base64-encoded-redis-password>

---
# PersistentVolumeClaim for model storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: athena-models-pvc
  namespace: athena-ethics
spec:
  accessModes:
    - ReadOnlyMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
# Deployment for Athena Ethics Engine
apiVersion: apps/v1
kind: Deployment
metadata:
  name: athena-ethics-engine
  namespace: athena-ethics
  labels:
    app.kubernetes.io/name: athena
    app.kubernetes.io/component: ethics-engine
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: athena
      app.kubernetes.io/component: ethics-engine
  template:
    metadata:
      labels:
        app.kubernetes.io/name: athena
        app.kubernetes.io/component: ethics-engine
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: ethics-engine
        image: athena/ethics-engine:latest
        ports:
        - containerPort: 8000
          name: api
        - containerPort: 8080
          name: metrics
        env:
        - name: ATHENA_CONFIG_ENV
          value: "production"
        - name: META_API_KEY
          valueFrom:
            secretKeyRef:
              name: athena-secrets
              key: meta-api-key
        - name: DATABASE_URL
          value: "postgresql://athena:$(DATABASE_PASSWORD)@postgres:5432/athena"
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: athena-secrets
              key: database-password
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis:6379/0"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: athena-secrets
              key: redis-password
        volumeMounts:
        - name: config-volume
          mountPath: /app/configs
          readOnly: true
        - name: models-volume
          mountPath: /app/models
          readOnly: true
        resources:
          requests:
            memory: "4Gi"
            cpu: "2"
          limits:
            memory: "8Gi"
            cpu: "4"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: config-volume
        configMap:
          name: athena-config
      - name: models-volume
        persistentVolumeClaim:
          claimName: athena-models-pvc

---
# Service for Ethics Engine
apiVersion: v1
kind: Service
metadata:
  name: athena-ethics-engine-service
  namespace: athena-ethics
  labels:
    app.kubernetes.io/name: athena
    app.kubernetes.io/component: ethics-engine
spec:
  selector:
    app.kubernetes.io/name: athena
    app.kubernetes.io/component: ethics-engine
  ports:
  - name: api
    port: 8000
    targetPort: 8000
  - name: metrics
    port: 8080
    targetPort: 8080
  type: ClusterIP

---
# HorizontalPodAutoscaler for automatic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: athena-ethics-engine-hpa
  namespace: athena-ethics
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: athena-ethics-engine
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: athena-ethics
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: athena
        - name: POSTGRES_USER
          value: athena
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: athena-secrets
              key: database-password
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 50Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: athena-ethics
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: athena-ethics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --appendonly
        - "yes"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: athena-secrets
              key: redis-password
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
      volumes:
      - name: redis-storage
        emptyDir: {}

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: athena-ethics
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: athena-ingress
  namespace: athena-ethics
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.athena.example.com
    secretName: athena-tls
  rules:
  - host: api.athena.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: athena-ethics-engine-service
            port:
              number: 8000

---
# ServiceMonitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: athena-ethics-engine
  namespace: athena-ethics
  labels:
    app.kubernetes.io/name: athena
    app.kubernetes.io/component: ethics-engine
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: athena
      app.kubernetes.io/component: ethics-engine
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: athena-network-policy
  namespace: athena-ethics
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: athena
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS outbound
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS