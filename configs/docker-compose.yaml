# Docker Compose Configuration for Project Athena
# Complete stack deployment with all services

version: '3.8'

services:
  # Main Athena Ethics Engine
  athena-engine:
    build:
      context: .
      dockerfile: Dockerfile
    image: athena/ethics-engine:latest
    container_name: athena-ethics-engine
    ports:
      - "8000:8000"  # API port
      - "8080:8080"  # Metrics port
    environment:
      - ATHENA_CONFIG_ENV=production
      - ATHENA_LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://athena:password@postgres:5432/athena
      - META_API_KEY=${META_API_KEY}
    volumes:
      - ./configs:/app/configs:ro
      - ./models:/app/models:ro
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
        reservations:
          memory: 4G
          cpus: '2'

  # Dashboard Web Interface
  athena-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    image: athena/dashboard:latest
    container_name: athena-dashboard
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://athena-engine:8000
      - REACT_APP_METRICS_URL=http://prometheus:9090
    depends_on:
      - athena-engine
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: athena-postgres
    environment:
      - POSTGRES_DB=athena
      - POSTGRES_USER=athena
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U athena -d athena"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: athena-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: athena-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: athena-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

  # Elasticsearch for Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: athena-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: athena-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: athena-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - athena-engine
      - athena-dashboard
    restart: unless-stopped

  # Model Serving (Optional)
  model-server:
    build:
      context: .
      dockerfile: Dockerfile.models
    image: athena/model-server:latest
    container_name: athena-model-server
    environment:
      - MODEL_CACHE_SIZE=8192
      - TORCH_HOME=/models/cache
    volumes:
      - ./models:/models:ro
      - model_cache:/models/cache
    ports:
      - "8001:8001"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 16G
          cpus: '8'
        reservations:
          memory: 8G
          cpus: '4'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  model_cache:
    driver: local

networks:
  default:
    name: athena-network
    driver: bridge